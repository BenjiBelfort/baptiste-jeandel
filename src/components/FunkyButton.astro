---
type Props = {
  label: string;
  color?: string;
  href?: string;
  as?: 'a' | 'button';
  type?: 'button' | 'submit' | 'reset';
  id?: string;
  class?: string;
};

const shadowMap: Record<string, string> = {
  "bg-violet-300": "rgb(139 92 246)",
  "bg-green-300": "rgb(34 197 94)",
  "bg-sky-300": "rgb(14 165 233)",
  "bg-yellow-300": "rgb(234 179 8)",
  "bg-slate-300": "rgb(71 85 105)",
};

const customColors: Record<string, {bg: string; shadow: string}> = {
  redBJ: { bg: "var(--redBJ)", shadow: "var(--redBJ-shadow)" },
  bleuBJ: { bg: "var(--bleuBJ)", shadow: "var(--bleuBJ-shadow)" },
  orangeBJ: { bg: "var(--orangeBJ)", shadow: "var(--orangeBJ-shadow)" },
};

const {
  label,
  color = "bg-sky-300",
  href = "#",
  as = "a",
  type = "button",
  id,
  class: extra = "",
} = Astro.props;

let bgClass = color;
let shadowColor = "rgba(0,0,0,0.25)";

if (customColors[color]) {
  bgClass = "";
  shadowColor = customColors[color].shadow;
} else {
  shadowColor = shadowMap[color] ?? "rgba(0,0,0,0.25)";
}

const base = `
  relative inline-flex items-center justify-center rounded-full
  ${bgClass} text-black px-6 py-3 text-base md:text-xl font-semibold text-center
  cursor-pointer select-none touch-manipulation
  transform transition-all duration-200
  hover:shadow-md/30
  shadow-[0_4px_0_var(--shadow-color)]
`;
---
{as === 'button' ? (
  <button
    id={id}
    type={type}
    class={`${base} ${extra}`}
    style={customColors[color] ? `background-color: ${customColors[color].bg}; --shadow-color: ${shadowColor};` : `--shadow-color: ${shadowColor};`}
  >
    <span class="relative z-10">{label}</span>
  </button>
) : (
  <a
    id={id}
    href={href}
    class={`${base} ${extra}`}
    style={customColors[color] ? `background-color: ${customColors[color].bg}; --shadow-color: ${shadowColor};` : `--shadow-color: ${shadowColor};`}
  >
    <span class="relative z-10">{label}</span>
  </a>
)}
