---
import Site from '@/layouts/SiteLayout.astro';
import FunkyButton from '@/components/FunkyButton.astro';
import PigeonEasterEgg from '@/components/PigeonEasterEgg.astro';

// Domain subforms
import MusicoForm from '@/forms/MusicoForm.astro';
import EveilForm from '@/forms/EveilForm.astro';
import RelaxForm from '@/forms/RelaxForm.astro';
import CoursForm from '@/forms/CoursForm.astro';
import SpectacleForm from '@/forms/SpectacleForm.astro';
import AtelierEhpadForm from '@/forms/AtelierEhpadForm.astro';
import AtelierPeForm from '@/forms/AtelierPeForm.astro';

const url = new URL(Astro.request.url);
const originFromQuery = url.searchParams.get('origin') ?? '';
const domainFromQuery = url.searchParams.get('domain') ?? '';
---

<Site title="Contact — Demander un devis" description="Demandez un devis pour services ou formations.">

  <!-- Anti-FOUC pour les champs conditionnels -->
  <style is:inline>
    [data-show-if] { display: none; }
    [data-show-if].__show { display: block; }
  </style>

  <section class="max-w-3xl mx-auto px-4 py-10">
    <div class="mb-6">
      <a id="back-link" href="/" class="text-sm underline">← Retour</a>
    </div>

    <h1 class="text-3xl font-bold mb-6">Contact / Demander un devis</h1>
    <p class="text-stone-600 mb-6">
      Choisissez un domaine pour afficher les questions adaptées. Tous les champs marqués * sont requis.
    </p>

    <!-- === Formulaire VISIBLE (pas de data-netlify ici) === -->
    <form
      id="contact-form"
      method="POST"
      action="/merci"
      class="space-y-6"
      autocomplete="off"
      accept-charset="UTF-8"
    >
      <!-- Provenance -->
      <input type="hidden" id="Provenance" name="Provenance" value={originFromQuery} />

      <!-- Domaine -->
      <label class="block">
        <span>Domaine *</span>
        <select id="domain" name="Domaine" required class="mt-1 w-full border bg-white p-2">
          <option value="">— Sélectionner —</option>
          <option>Éveil musical</option>
          <option>Musicothérapie</option>
          <option>Relaxations sonores</option>
          <option>Spectacles</option>
          <option>Atelier EHPAD</option>
          <option>Atelier petite enfance</option>
          <option>Cours de batterie / Handpan</option>
          <option>Me contacter</option>
        </select>
      </label>

      <!-- Coordonnées (communs) -->
      <div class="grid md:grid-cols-2 gap-4">
        <label class="block">
          <span class="text-sm">Prénom Nom *</span>
          <input name="Nom" required class="mt-1 w-full border bg-white p-2" />
        </label>
        <label class="block">
          <span class="text-sm">Email *</span>
          <input name="Email" type="email" required class="mt-1 w-full border bg-white p-2" />
        </label>
      </div>

      <!-- Bloc spécifique domaine -->
      <div id="domain-blocks" class="space-y-6">
        <MusicoForm />
        <EveilForm />
        <CoursForm />
        <RelaxForm />
        <SpectacleForm />
        <AtelierEhpadForm />
        <AtelierPeForm />
        <!-- tu pourras ajouter d'autres sous-formulaires ici -->
      </div>

      <label class="block">
        <span class="text-sm">Message</span>
        <textarea name="Message" rows="5" class="mt-1 w-full border bg-white p-2"></textarea>
      </label>

      <!-- Consentement RGPD -->
      <div class="flex items-start gap-2 text-sm">
        <input 
          type="checkbox" 
          id="consentement" 
          name="Consentement RGPD" 
          value="Oui" 
          required 
          class="mt-1" 
        />
        <label for="consentement" class="cursor-default select-text">
          J’accepte que mes informations soient utilisées par <strong>Baptiste Jeandel</strong> et son équipe afin d’être recontacté.
          <br />
          <span class="text-stone-600">
            Vos données ne sont jamais revendues. En savoir plus :
            <a href="/mentions-legales" class="underline">Mentions légales</a>.
          </span>
        </label>
      </div>

      <div class="flex items-center justify-between pt-2">
        <FunkyButton id="back-btn" as="button" type="button" label="Retour" color="bg-white" />
        <div class="relative">
          <FunkyButton as="button" type="submit" label="Envoyer" color="bg-green-300" />
          <PigeonEasterEgg />
        </div>
      </div>
    </form>

    <!-- === Formulaire FANTÔME Netlify (détection statique uniquement) === -->
    <form
      id="shadow-detection"
      name="devis-v2"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/merci"
      method="POST"
      class="hidden"
      aria-hidden="true"
    >
      <input type="hidden" name="form-name" value="devis-v2" />
      <div style="display:none;">
        <label>Ne pas remplir: <input type="text" name="bot-field" tabindex="-1" autocomplete="off" /></label>
      </div>
      <!-- Aucun autre champ ici -->
    </form>
  </section>

  <script is:inline>
    // ---------- Utilitaires ----------
    const $ = (sel, root = document) => root.querySelector(sel);
    const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

    // ---------- Sous-formulaires par domaine ----------
    const domainSelect = $('#domain');
    const blocks = $$('[data-domain-form]');

    function setBlockActive(block, isActive) {
      block.classList.toggle('hidden', !isActive);
      // (dés)activer uniquement les champs visibles (pas le registre hidden)
      $$('input, select, textarea', block).forEach(el => {
        if (el.type === 'hidden') return; // les hidden sont gérés au submit
        el.disabled = !isActive;
        if (!isActive) {
          if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
          else el.value = '';
          el.removeAttribute('required');
        }
      });
      if (isActive) setupConditions(block);
    }

    function showBlock(value) {
      blocks.forEach(b => setBlockActive(b, b.getAttribute('data-domain-form') === value));
    }

    // ---------- Mapping legacy -> libellé select ----------
    const LEGACY_TO_FR = {
      'EVEIL MUSICAL': 'Éveil musical',
      'MUSICO THERAPIE': 'Musicothérapie',
      'MUSICO-THERAPIE': 'Musicothérapie',
      'Relaxations sonores': 'Relaxations sonores',
      'Spectacles': 'Spectacles',
      'Atelier EHPAD': 'Atelier EHPAD',
      'Atelier petite enfance': 'Atelier petite enfance',
      'ATELIER PETITE ENFANCE': 'Atelier petite enfance',
      'Atelier Petite Enfance': 'Atelier petite enfance',
      'Cours': 'Cours de batterie / Handpan',
      'ME CONTACTER': 'Me contacter',
      'Me contacter uniquement': 'Me contacter',
    };

    function canonicalize(raw) {
      if (!raw) return '';
      return LEGACY_TO_FR[raw] || LEGACY_TO_FR[raw.toUpperCase()] || raw;
    }

    function optionExists(select, value) {
      return [...select.options].some(o => o.value === value);
    }

    // Init domaine depuis l'URL (puis fallback sur valeur actuelle)
    const params  = new URLSearchParams(location.search);
    const mapped  = canonicalize(params.get('domain') || '');

    if (domainSelect) {
      if (mapped && optionExists(domainSelect, mapped)) {
        domainSelect.value = mapped;
        showBlock(mapped);
      } else {
        showBlock(domainSelect.value);
      }
      domainSelect.addEventListener('change', () => showBlock(domainSelect.value));
    }

    // ---------- Champs conditionnels (showIf) ----------
    function setupConditions(container) {
      const wrappers = $$('[data-show-if]', container);
      if (!wrappers.length) return;

      // cacher d'emblée (anti-flash)
      wrappers.forEach(w => w.classList.add('hidden'));

      function toggleWrapper(wrap, show) {
        if (show) {
          wrap.classList.add('__show');
          wrap.classList.remove('hidden');
        } else {
          wrap.classList.remove('__show');
          wrap.classList.add('hidden');
        }
        // accessibilité/validation + reset doux
        $$('input, select, textarea', wrap).forEach(el => {
          const wantsRequired = el.hasAttribute('data-required'); // opt-in
          if (show) {
            el.disabled = false;
            if (wantsRequired) el.setAttribute('required', 'true');
          } else {
            el.disabled = true;
            el.removeAttribute('required');
            if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
            else el.value = '';
          }
        });
      }

      function evaluateOne(wrap) {
        const depKey    = wrap.getAttribute('data-show-if') || '';
        const equals    = wrap.getAttribute('data-show-eq');
        const equalsAny = (wrap.getAttribute('data-show-any') || '')
          .split(',').map(s => s.trim()).filter(Boolean);

        const depCtrl = container.querySelector(`[data-reg-id="${depKey}"]`);
        if (!depCtrl) { toggleWrapper(wrap, true); return; }

        const val = (depCtrl.value || '').trim();
        let show = true;
        if (equals !== null && equals !== undefined) show = (val === equals);
        if (equalsAny.length) show = equalsAny.includes(val);
        toggleWrapper(wrap, show);
      }

      function evaluateAll() { wrappers.forEach(evaluateOne); }

      // écoute des contrôles pilotes
      const pilots = [...new Set(wrappers.map(w => w.getAttribute('data-show-if')).filter(Boolean))];
      pilots.forEach(key => {
        const ctl = container.querySelector(`[data-reg-id="${key}"]`);
        if (ctl && !ctl.__tc_bound) {
          ctl.addEventListener('input',  evaluateAll);
          ctl.addEventListener('change', evaluateAll);
          ctl.__tc_bound = true;
        }
      });

      evaluateAll();
    }

    // ---------- Bouton retour intelligent ----------
    const originParam = new URLSearchParams(location.search).get('origin');
    const backBtn = $('#back-btn');
    const backLink = $('#back-link');
    const fallbackHref = originParam ? `/${originParam}` : '/';

    function goBack() {
      try {
        if (document.referrer && new URL(document.referrer).origin === location.origin) {
          history.back(); return;
        }
      } catch(e){}
      location.href = fallbackHref;
    }
    backBtn?.addEventListener('click', goBack);
    backLink?.addEventListener('click', (e) => { e.preventDefault(); goBack(); });

    // ---------- Submit : collecte sélective + envoi via fetch à Netlify ----------
    const form = $('#contact-form');

    function groupByDataRegId(nodeList) {
      const map = new Map();
      nodeList.forEach(el => {
        const key = el.getAttribute('data-reg-id');
        if (!key) return;
        if (!map.has(key)) map.set(key, []);
        map.get(key).push(el);
      });
      return map;
    }

    function valueForGroup(els) {
      if (!els || !els.length) return '';
      const sample = els[0];

      if (sample instanceof HTMLInputElement && sample.type === 'radio') {
        const checked = els.find(e => e.checked);
        return checked ? (checked.value || '').trim() : '';
      }

      if (sample instanceof HTMLInputElement && sample.type === 'checkbox') {
        if (els.length > 1) {
          return els.filter(e => e.checked).map(e => (e.value || '').trim()).join(', ');
        }
        return sample.checked ? (sample.value || 'Oui') : '';
      }

      return (sample.value || '').trim();
    }

    function encode(data) {
      return Object.keys(data)
        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(data[k]))
        .join('&');
    }

    form?.addEventListener('submit', async (e) => {
      // Validations natives HTML5
      if (!form.checkValidity()) {
        e.preventDefault();
        form.reportValidity();
        return;
      }

      e.preventDefault(); // on gère l’envoi

      // 1) Construire l'objet payload avec uniquement les champs non vides
      const payload = {
        'form-name': 'devis-v2',
      };

      // Champs communs
      const prov = $('#Provenance')?.value?.trim();
      const dom  = $('#domain')?.value?.trim();
      const nom  = form.querySelector('[name="Nom"]')?.value?.trim();
      const mail = form.querySelector('[name="Email"]')?.value?.trim();
      const msg  = form.querySelector('[name="Message"]')?.value?.trim();
      const rgpd = $('#consentement')?.checked ? 'Oui' : '';

      if (prov) payload['Provenance'] = prov;
      if (dom)  payload['Domaine'] = dom;
      if (nom)  payload['Nom'] = nom;
      if (mail) payload['Email'] = mail;
      if (msg)  payload['Message'] = msg;
      if (rgpd) payload['Consentement RGPD'] = rgpd;

      // Champs du sous-form actif
      const active = $$('[data-domain-form]').find(b => !b.classList.contains('hidden'));
      if (active) {
        const groups = groupByDataRegId($$('[data-reg-id]', active));
        groups.forEach((els, key) => {
          let val = valueForGroup(els);
          if (!val) return;

          if (key === 'reg-frequence' && val === 'autre') {
            const other = active.querySelector('[data-reg-id="frequenceAutre"]');
            const otherVal = other ? valueForGroup([other]) : '';
            val = otherVal || 'autre';
          }

          // Nom final du champ : si le registre #key existe et a name/data-name, on l'utilise
          const hiddenReg = active.querySelector(`#${key}`);
          const fieldName =
            hiddenReg?.getAttribute?.('name') ||
            hiddenReg?.dataset?.name ||
            key;

          payload[fieldName] = val;
        });
      }

      // 2) URL de redirection (/merci?origin=...)
      const detectionForm = $('#shadow-detection');
      const baseAction = detectionForm?.getAttribute('action') || '/merci';
      const current = new URL(baseAction, location.origin);
      const originVal = originParam || ($('#Provenance')?.value || '');
      if (originVal) current.searchParams.set('origin', originVal);

      // 3) Envoi à Netlify (POST url-encoded vers la racine)
      try {
        await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: encode(payload),
        });
        // 4) Redirection
        window.location.assign(`${current.pathname}${current.search}`);
      } catch (err) {
        console.error('Netlify form submit error:', err);
        // Fallback : on tente une navigation simple (pas idéal mais évite de bloquer l’utilisateur)
        window.location.assign(`${current.pathname}${current.search}`);
      }
    });
  </script>

</Site>
