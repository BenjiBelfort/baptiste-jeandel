---
import Site from '@/layouts/SiteLayout.astro';
import FunkyButton from '@/components/FunkyButton.astro';
import PigeonEasterEgg from '@/components/PigeonEasterEgg.astro';

// Domain subforms
import MusicoForm from '@/forms/MusicoForm.astro';
import EveilForm from '@/forms/EveilForm.astro';
import RelaxForm from '@/forms/RelaxForm.astro';
import SpectacleForm from '@/forms/SpectacleForm.astro';
import AtelierEhpadForm from '@/forms/AtelierEhpadForm.astro';
import AtelierPeForm from '@/forms/AtelierPeForm.astro';
import FormationHandpanForm from '@/forms/FormationHandpanForm.astro';
import ConcertHandpanForm from '@/forms/ConcertHandpanForm.astro';
import ArchivesSonoresForm from '@/forms/ArchivesSonoresForm.astro';
import CoursBatterieForm from '@/forms/CoursBatterieForm.astro';
import CoursHandpanForm from '@/forms/CoursHandpanForm.astro';

const url = new URL(Astro.request.url);
const originFromQuery = url.searchParams.get('origin') ?? '';
const domainFromQuery = url.searchParams.get('domain') ?? '';
---

<Site title="Contact — Demander un devis" description="Demandez un devis pour services ou formations.">

  <!-- Anti-FOUC + étoile dynamique -->
  <style is:inline>
    [data-show-if] { display: none; }
    [data-show-if].__show { display: block; }
    .is-required::after { content: " *"; }
  </style>

  <section class="max-w-3xl mx-auto px-4 py-10">
    <div class="mb-6">
      <a id="back-link" href="/" class="text-sm underline">← Retour</a>
    </div>

    <h1 class="text-3xl font-bold mb-6">Contact / Demander un devis</h1>
    <p class="text-stone-600 mb-6">
      Choisissez un domaine pour afficher les questions adaptées. Tous les champs marqués * sont requis.
    </p>

    <form
      id="contact-form"
      method="POST"
      name="contact-pour-Baptiste"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/merci"
      class="space-y-6"
      autocomplete="off"
    >
      <!-- Netlify Forms -->
      <input type="hidden" name="form-name" value="contact-pour-Baptiste" />
      <input type="text" name="bot-field" class="hidden" tabindex="-1" autocomplete="off" />

      <!-- Provenance -->
      <input type="hidden" id="Provenance" name="Provenance" value={originFromQuery} />

      <!-- Domaine -->
      <label class="block">
        <span>Domaine *</span>
        <select id="domain" name="Domaine" required class="mt-1 w-full border bg-white p-2">
          <option value="">— Sélectionner —</option>
          <option>Éveil Musical</option>
          <option>Musicothérapie</option>
          <option>Relaxations Sonores</option>
          <option>Spectacles</option>
          <option>Concert Handpan</option>
          <option>Archives Sonores</option>
          <option>Formation EHPAD</option>
          <option>Formation Petite Enfance</option>
          <option>Formation Handpan</option>
          <option>Cours de Batterie</option>
          <option>Cours de Handpan</option>
          <option>Me contacter</option>
        </select>
      </label>

      <!-- Coordonnées (communs) -->
      <div class="grid md:grid-cols-2 gap-4">
        <label class="block">
          <span class="text-sm">Prénom Nom *</span>
          <input name="Nom" required class="mt-1 w-full border bg-white p-2" />
        </label>
        <label class="block">
          <span class="text-sm">Email *</span>
          <input name="Email" type="email" required class="mt-1 w-full border bg-white p-2" />
        </label>
      </div>

      <!-- Bloc spécifique domaine -->
      <div id="domain-blocks" class="space-y-6">
        <MusicoForm />
        <EveilForm />
        <RelaxForm />
        <SpectacleForm />
        <AtelierEhpadForm />
        <AtelierPeForm />
        <FormationHandpanForm />
        <ConcertHandpanForm />
        <ArchivesSonoresForm />
        <CoursBatterieForm />
        <CoursHandpanForm />
      </div>

      <!-- Message (devient requis si domaine = "Me contacter") -->
      <label class="block">
        <span class="text-sm" id="message-label">Message</span>
        <textarea id="message" name="Message" rows="5" class="mt-1 w-full border bg-white p-2"></textarea>
      </label>

      <!-- Consentement RGPD -->
      <div class="flex items-start gap-2 text-sm">
        <input 
          type="checkbox" 
          id="consentement" 
          name="Consentement RGPD" 
          value="Oui" 
          required 
          class="mt-1" 
        />
        <label for="consentement" class="cursor-default select-text">
          J’accepte que mes informations soient utilisées par <strong>Baptiste Jeandel</strong> et son équipe afin d’être recontacté.
          <br />
          <span class="text-stone-600">
            Vos données ne sont jamais revendues. En savoir plus :
            <a href="/mentions-legales" class="underline">Mentions légales</a>.
          </span>
        </label>
      </div>

      <div class="flex items-center justify-between pt-2">
        <FunkyButton id="back-btn" as="button" type="button" label="Retour" color="bg-white" />
        <div class="relative">
          <FunkyButton as="button" type="submit" label="Envoyer" color="bg-green-300" />
          <PigeonEasterEgg />
        </div>
      </div>
    </form>
  </section>

  <script is:inline>
    // ---------- Utilitaires ----------
    const $ = (sel, root = document) => root.querySelector(sel);
    const $$ = (sel, root = document) => Array.from(root.querySelectorAll(sel));

    // ---------- Liste canonique des domaines ----------
    const DOMAINS = [
      'Éveil Musical',
      'Musicothérapie',
      'Relaxations Sonores',
      'Spectacles',
      'Concert Handpan',
      'Archives Sonores',
      'Formation EHPAD',
      'Formation Petite Enfance',
      'Formation Handpan',
      'Cours de Batterie',
      'Cours de Handpan',
      'Me contacter',
    ];

    const normalize = (s='') =>
      s.normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/\s+/g, ' ').trim().toLowerCase();

    function findCanonicalDomain(raw) {
      if (!raw) return '';
      const key = normalize(raw);
      return DOMAINS.find(d => normalize(d) === key) || '';
    }

    // ---------- Sous-formulaires par domaine ----------
    const domainSelect = $('#domain');
    const blocks = $$('[data-domain-form]');

    function setBlockActive(block, isActive) {
      block.classList.toggle('hidden', !isActive);

      // (dés)activer uniquement les champs visibles (pas le registre hidden)
      $$('input, select, textarea', block).forEach(el => {
        if (el.type === 'hidden') return;

        if (!isActive) {
          el.disabled = true;
          if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
          else el.value = '';
        } else {
          el.disabled = false;
        }
      });

      if (isActive) setupConditions(block);
    }

    function showBlock(value) {
      blocks.forEach(b => setBlockActive(b, b.getAttribute('data-domain-form') === value));
    }

    // ---------- Message requis si "Me contacter" ----------
    const message = $('#message');
    const messageLabel = $('#message-label');
    function updateMessageRequirement() {
      const need = domainSelect?.value === 'Me contacter';
      if (!message) return;
      message.required = need;
      message.toggleAttribute('aria-required', need);
      messageLabel?.classList.toggle('is-required', need);
    }

    // ---------- Init domaine depuis l'URL ----------
    const params = new URLSearchParams(location.search);
    const urlDomain = params.get('domain');
    const canonical = findCanonicalDomain(urlDomain);

    if (domainSelect) {
      if (canonical) {
        domainSelect.value = canonical;
      }
      showBlock(domainSelect.value);
      updateMessageRequirement();

      domainSelect.addEventListener('change', () => {
        showBlock(domainSelect.value);
        updateMessageRequirement();
      });
    }

    // ---------- Champs conditionnels (showIf) ----------
    function setupConditions(container) {
      const wrappers = $$('[data-show-if]', container);
      if (!wrappers.length) return;

      wrappers.forEach(w => w.classList.add('hidden'));

      function toggleWrapper(wrap, show) {
        if (show) {
          wrap.classList.add('__show'); wrap.classList.remove('hidden');
        } else {
          wrap.classList.remove('__show'); wrap.classList.add('hidden');
        }
        $$('input, select, textarea', wrap).forEach(el => {
          if (show) {
            el.disabled = false;
          } else {
            el.disabled = true;
            if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
            else el.value = '';
          }
        });
      }

      function evaluateOne(wrap) {
        const depKey    = wrap.getAttribute('data-show-if') || '';
        const equals    = wrap.getAttribute('data-show-eq');
        const equalsAny = (wrap.getAttribute('data-show-any') || '').split(',').map(s => s.trim()).filter(Boolean);

        const depCtrl = container.querySelector(`[data-reg-id="${depKey}"]`);
        if (!depCtrl) { toggleWrapper(wrap, true); return; }

        const val = (depCtrl.value || '').trim();
        let show = true;
        if (equals !== null && equals !== undefined) show = (val === equals);
        if (equalsAny.length) show = equalsAny.includes(val);
        toggleWrapper(wrap, show);
      }

      function evaluateAll() { wrappers.forEach(evaluateOne); }

      const pilots = [...new Set(wrappers.map(w => w.getAttribute('data-show-if')).filter(Boolean))];
      pilots.forEach(key => {
        const ctl = container.querySelector(`[data-reg-id="${key}"]`);
        if (ctl && !ctl.__tc_bound) {
          ctl.addEventListener('input',  evaluateAll);
          ctl.addEventListener('change', evaluateAll);
          ctl.__tc_bound = true;
        }
      });

      evaluateAll();
    }

    // ---------- Bouton retour intelligent ----------
    const originParam = new URLSearchParams(location.search).get('origin');
    const backBtn = $('#back-btn');
    const backLink = $('#back-link');
    const fallbackHref = originParam ? `/${originParam}` : '/';

    function goBack() {
      try {
        if (document.referrer && new URL(document.referrer).origin === location.origin) {
          history.back(); return;
        }
      } catch(e){}
      location.href = fallbackHref;
    }
    backBtn?.addEventListener('click', goBack);
    backLink?.addEventListener('click', (e) => { e.preventDefault(); goBack(); });

    // ---------- Submit : copie visible -> registre hidden (Netlify) ----------
    const form = $('#contact-form');

    function groupByDataRegId(nodeList) {
      const map = new Map();
      nodeList.forEach(el => {
        const key = el.getAttribute('data-reg-id');
        if (!key) return;
        if (!map.has(key)) map.set(key, []);
        map.get(key).push(el);
      });
      return map;
    }

    function valueForGroup(els) {
      if (!els || !els.length) return '';
      const sample = els[0];

      // Radios
      if (sample instanceof HTMLInputElement && sample.type === 'radio') {
        const checked = els.find(e => e.checked);
        return checked ? (checked.value || '').trim() : '';
      }

      // Checkboxes
      if (sample instanceof HTMLInputElement && sample.type === 'checkbox') {
        if (els.length > 1) {
          return els.filter(e => e.checked).map(e => (e.value || '').trim()).join(', ');
        }
        return sample.checked ? (sample.value || 'Oui') : '';
      }

      // Select / Text / Textarea
      return (sample.value || '').trim();
    }

    form?.addEventListener('submit', () => {
      // 1) quel sous-form est actif ?
      const active = $$('[data-domain-form]').find(b => !b.classList.contains('hidden'));
      if (!active) return;

      // 2) reset de tous les registres des sous-forms
      $$('[data-domain-form] [data-registry] input[type="hidden"]').forEach(h => {
        h.disabled = true;
        h.value = '';
      });

      // 3) regrouper les contrôles visibles par clé data-reg-id
      const groups = groupByDataRegId($$('[data-reg-id]', active));

      // 4) pour chaque groupe → valeur → hidden correspondant (#reg-xxx)
      groups.forEach((els, key) => {
        const hidden = active.querySelector(`#${key}`);
        if (!hidden) return;

        let val = valueForGroup(els);

        // cas particulier : fréquence "autre" → précision
        if (key === 'reg-frequence' && val === 'autre') {
          const other = active.querySelector('[data-reg-id="frequenceAutre"]');
          const otherVal = other ? valueForGroup([other]) : '';
          val = otherVal || 'autre';
        }

        if (val) {
          hidden.value = val;
          hidden.disabled = false;
        }
      });

      // 5) Ajouter origin dans l'URL de redirection si présent (vers /merci)
      const action = form.getAttribute('action') || '/merci';
      const current = new URL(action, location.origin);
      const originVal = originParam || ($('#Provenance')?.value || '');
      if (originVal) current.searchParams.set('origin', originVal);
      form.setAttribute('action', `${current.pathname}${current.search}`);
      // Laissez Netlify soumettre
    });

    // UX : focus/scroll sur le premier champ invalide
    form?.addEventListener('invalid', () => {}, true);
    form?.addEventListener('submit', (e) => {
      if (!form.checkValidity()) {
        e.preventDefault();
        const firstInvalid = form.querySelector(':invalid');
        firstInvalid?.focus({ preventScroll: true });
        firstInvalid?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    });
  </script>

</Site>
