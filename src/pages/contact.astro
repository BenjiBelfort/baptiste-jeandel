---
import Site from '@/layouts/SiteLayout.astro';
import FunkyButton from '@/components/FunkyButton.astro';

// Domain subforms
import MusicoForm from '@/forms/MusicoForm.astro';
import EveilForm from '@/forms/EveilForm.astro';
import HandpanForm from '@/forms/HandpanForm.astro';

const url = new URL(Astro.request.url);
const originFromQuery = url.searchParams.get('origin') ?? '';
const domainFromQuery = url.searchParams.get('domain') ?? '';
---

<Site title="Contact — Demander un devis" description="Demandez un devis pour services ou formations.">

    <!-- Anti-FOUC pour les champs conditionnels -->
  <style is:inline>
    [data-show-if] { display: none; }
    [data-show-if].__show { display: block; }
  </style>

  <section class="max-w-3xl mx-auto px-4 py-10">
    <div class="mb-6">
      <a id="back-link" href="/" class="text-sm underline">← Retour</a>
    </div>

    <h1 class="text-3xl font-bold mb-6">Contact / Demander un devis</h1>
    <p class="text-stone-600 mb-6">
      Choisissez un domaine pour afficher les questions adaptées. Tous les champs marqués * sont requis.
    </p>

    <form
      id="contact-form"
      method="POST"
      name="devis-v2"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/merci"
      class="space-y-6"
      autocomplete="off"
    >
      <!-- Netlify Forms -->
      <input type="hidden" name="form-name" value="devis-v2" />
      <input type="text" name="bot-field" class="hidden" tabindex="-1" autocomplete="off" />

      <!-- Provenance -->
      <input type="hidden" id="Provenance" name="Provenance" value={originFromQuery} />

      <!-- Domaine -->
      <label class="block">
        <span>Domaine *</span>
          <select id="domain" name="Domaine" required class="mt-1 w-full border bg-white p-2">
            <option value="">— Sélectionner —</option>
            <option>Éveil musical</option>
            <option>Musicothérapie</option>
            <option>Relaxations sonores</option>
            <option>Spectacles</option>
            <option>Atelier EHPAD</option>
            <option>Atelier Petite Enfance</option>
            <option>Handpan</option>
            <option>Me contacter</option>
          </select>
      </label>

      <!-- Bloc spécifique domaine -->
      <div id="domain-blocks" class="space-y-6">
        <MusicoForm />
        <EveilForm />
        <HandpanForm />
        <!-- tu pourras ajouter d'autres sous-formulaires ici -->
      </div>

      <!-- Coordonnées (communs) -->
      <div class="grid md:grid-cols-2 gap-4">
        <label class="block">
          <span class="text-sm">Prénom Nom *</span>
          <input name="Nom" required class="mt-1 w-full border bg-white p-2" />
        </label>
        <label class="block">
          <span class="text-sm">Email *</span>
          <input name="Email" type="email" required class="mt-1 w-full border bg-white p-2" />
        </label>
      </div>

      <label class="block">
        <span class="text-sm">Message</span>
        <textarea name="Message" rows="5" class="mt-1 w-full border bg-white p-2"></textarea>
      </label>

      <!-- Consentement RGPD -->
      <label class="flex items-start gap-2 text-sm">
        <input type="checkbox" name="Consentement RGPD" value="Oui" required class="mt-1" />
        <span>
          J’accepte que mes informations soient utilisées par <strong>Baptiste Jeandel</strong> afin d’être recontacté.
          <br />
          <span class="text-stone-600">
            Vos données ne sont jamais revendues. En savoir plus :
            <a href="/mentions-legales" class="underline">Mentions légales</a>.
          </span>
        </span>
      </label>

      <div class="flex items-center justify-between pt-2">
        <FunkyButton id="back-btn" as="button" type="button" label="Retour" color="bg-white" />
        <FunkyButton as="button" type="submit" label="Envoyer" color="bg-green-300" />
      </div>
    </form>
  </section>

  <script is:inline>
    // -- Gestion des sous-formulaires (comme tu as déjà)
    const domainSelect = document.getElementById('domain');
    const blocks = document.querySelectorAll('[data-domain-form]');

    function setBlockActive(block, isActive) {
      block.classList.toggle('hidden', !isActive);
      block.querySelectorAll('input, select, textarea').forEach(el => {
        if (el.type === 'hidden') return; // le registre est géré au submit
        el.disabled = !isActive;
        if (!isActive) {
          if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
          else el.value = '';
          el.removeAttribute('required'); // par sécurité
        }
      });
      if (isActive) setupConditions(block); // <-- (re)branche la logique conditionnelle
    }

    function showBlock(value) {
      blocks.forEach(b => setBlockActive(b, b.getAttribute('data-domain-form') === value));
    }

    // Mapping legacy -> libellé
    const LEGACY_TO_FR = {
      'EVEIL MUSICAL': 'Éveil musical',
      'MUSICO THERAPIE': 'Musicothérapie',
      'MUSICO-THERAPIE': 'Musicothérapie',
      'Relaxations sonores': 'Relaxations sonores',
      'Spectacles': 'Spectacles',
      'Atelier EHPAD': 'Atelier EHPAD',
      'Atelier Petite Enfance': 'Atelier Petite Enfance',
      'Handpan': 'Handpan',
      'ME CONTACTER': 'Me contacter',
      'Me contacter uniquement': 'Me contacter',
    };
    const params = new URLSearchParams(location.search);
    const canonicalize = (raw) => raw ? (LEGACY_TO_FR[raw] || LEGACY_TO_FR[raw.toUpperCase()] || raw) : '';
    const mapped = canonicalize(params.get('domain') || '');

    function optionExists(select, value) {
      return [...select.options].some(o => o.value === value);
    }

    if (domainSelect) {
      if (mapped && optionExists(domainSelect, mapped)) {
        domainSelect.value = mapped;
        showBlock(mapped);
      } else {
        showBlock(domainSelect.value);
      }
      domainSelect.addEventListener('change', () => showBlock(domainSelect.value));
    }

    // -- Logique conditionnelle par sous-formulaire
    function setupConditions(container) {
      const wrappers = Array.from(container.querySelectorAll('[data-show-if]'));
      if (!wrappers.length) return;

      // Utilitaires
      function toggleWrapper(wrap, show) {
        // Visuel
        if (show) { wrap.classList.add('__show'); wrap.classList.remove('hidden'); }
        else { wrap.classList.remove('__show'); wrap.classList.add('hidden'); }

        // Accessibilité + validation
        wrap.querySelectorAll('input, select, textarea').forEach(el => {
          const wasDataRequired = el.hasAttribute('data-required'); // opt-in "required si visible"
          if (show) {
            el.disabled = false;
            if (wasDataRequired) el.setAttribute('required', 'true');
          } else {
            el.disabled = true;
            el.removeAttribute('required');
            // reset doux
            if (el.type === 'checkbox' || el.type === 'radio') el.checked = false;
            else el.value = '';
          }
        });
      }

      function evaluateOne(wrap) {
        const depKey    = wrap.getAttribute('data-show-if') || '';
        const equals    = wrap.getAttribute('data-show-eq');
        const equalsAny = (wrap.getAttribute('data-show-any') || '').split(',').map(s => s.trim()).filter(Boolean);

        const depCtrl = container.querySelector(`[data-reg-id="${depKey}"]`);
        if (!depCtrl) { toggleWrapper(wrap, true); return; } // si on ne trouve pas le pilote, on montre par défaut

        const val = (depCtrl.value || '').trim();
        let show = true;
        if (equals !== null && equals !== undefined) show = (val === equals);
        if (equalsAny.length) show = equalsAny.includes(val);

        toggleWrapper(wrap, show);
      }

      function evaluateAll() { wrappers.forEach(evaluateOne); }

      // Écoute les contrôles pilotes (input/change)
      const pilots = new Set(wrappers.map(w => w.getAttribute('data-show-if')).filter(Boolean));
      pilots.forEach(key => {
        const ctl = container.querySelector(`[data-reg-id="${key}"]`);
        if (ctl && !ctl.__tc_bound) {
          ctl.addEventListener('input', evaluateAll);
          ctl.addEventListener('change', evaluateAll);
          ctl.__tc_bound = true; // évite le double-binding si on re-call setupConditions
        }
      });

      // Évaluation initiale (supprime le flash grâce au CSS + bascule proprement)
      evaluateAll();
    }

    // -- Retour intelligemment (inchangé)
    const originParam = new URLSearchParams(location.search).get('origin');
    const backBtn = document.getElementById('back-btn');
    const backLink = document.getElementById('back-link');
    const fallbackHref = originParam ? `/${originParam}` : '/';
    function goBack() {
      try {
        if (document.referrer && new URL(document.referrer).origin === location.origin) { history.back(); return; }
      } catch(e){}
      location.href = fallbackHref;
    }
    backBtn?.addEventListener('click', goBack);
    backLink?.addEventListener('click', (e) => { e.preventDefault(); goBack(); });

    // -- Submit (ton code existant) : ne copie que le bloc actif, inutile de changer
  </script>
</Site>
