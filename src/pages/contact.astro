---
import Site from '@/layouts/SiteLayout.astro';
import FunkyButton from '@/components/FunkyButton.astro';

// Domain subforms
import MusicoForm from '@/forms/MusicoForm.astro';
import EveilForm from '@/forms/EveilForm.astro';
import HandpanForm from '@/forms/HandpanForm.astro';

const url = new URL(Astro.request.url);
const originFromQuery = url.searchParams.get('origin') ?? '';
const domainFromQuery = url.searchParams.get('domain') ?? '';
---

<Site title="Contact — Demander un devis" description="Demandez un devis pour services ou formations.">
  <section class="max-w-3xl mx-auto px-4 py-10">
    <div class="mb-6">
      <a id="back-link" href="/" class="text-sm underline">← Retour</a>
    </div>

    <h1 class="text-3xl font-bold mb-6">Contact / Demander un devis</h1>
    <p class="text-stone-600 mb-6">
      Choisissez un domaine pour afficher les questions adaptées. Tous les champs marqués * sont requis.
    </p>

    <form
      id="contact-form"
      method="POST"
      name="devis-v2"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/merci"
      class="space-y-6"
      autocomplete="off"
    >
      <!-- Netlify Forms -->
      <input type="hidden" name="form-name" value="devis-v2" />
      <input type="text" name="bot-field" class="hidden" tabindex="-1" autocomplete="off" />

      <!-- Provenance -->
      <input type="hidden" id="Provenance" name="Provenance" value={originFromQuery} />

      <!-- Domaine -->
      <label class="block">
        <span>Domaine *</span>
        <select id="domain" name="Domaine" required class="mt-1 w-full border bg-white p-2">
          <option value="">— Sélectionner —</option>
          <option selected={domainFromQuery === 'Éveil musical'}>Éveil musical</option>
          <option selected={domainFromQuery === 'Musicothérapie'}>Musicothérapie</option>
          <option selected={domainFromQuery === 'Relaxations sonores'}>Relaxations sonores</option>
          <option selected={domainFromQuery === 'Spectacles'}>Spectacles</option>
          <option selected={domainFromQuery === 'Atelier EHPAD'}>Atelier EHPAD</option>
          <option selected={domainFromQuery === 'Atelier Petite Enfance'}>Atelier Petite Enfance</option>
          <option selected={domainFromQuery === 'Handpan'}>Handpan</option>
          <option selected={domainFromQuery === 'Me contacter'}>Me contacter</option>
        </select>
      </label>

      <!-- Bloc spécifique domaine -->
      <div id="domain-blocks" class="space-y-6">
        <MusicoForm />
        <EveilForm />
        <HandpanForm />
        <!-- tu pourras ajouter d'autres sous-formulaires ici -->
      </div>

      <!-- Coordonnées (communs) -->
      <div class="grid md:grid-cols-2 gap-4">
        <label class="block">
          <span class="text-sm">Prénom Nom *</span>
          <input name="Nom" required class="mt-1 w-full border bg-white p-2" />
        </label>
        <label class="block">
          <span class="text-sm">Email *</span>
          <input name="Email" type="email" required class="mt-1 w-full border bg-white p-2" />
        </label>
      </div>

      <label class="block">
        <span class="text-sm">Message</span>
        <textarea name="Message" rows="5" class="mt-1 w-full border bg-white p-2"></textarea>
      </label>

      <!-- Consentement RGPD -->
      <label class="flex items-start gap-2 text-sm">
        <input type="checkbox" name="Consentement RGPD" value="Oui" required class="mt-1" />
        <span>
          J’accepte que mes informations soient utilisées par <strong>Baptiste Jeandel</strong> afin d’être recontacté.
          <br />
          <span class="text-stone-600">
            Vos données ne sont jamais revendues. En savoir plus :
            <a href="/mentions-legales" class="underline">Mentions légales</a>.
          </span>
        </span>
      </label>

      <div class="flex items-center justify-between pt-2">
        <FunkyButton id="back-btn" as="button" type="button" label="Retour" color="bg-white" />
        <FunkyButton as="button" type="submit" label="Envoyer" color="bg-green-300" />
      </div>
    </form>
  </section>

  <script is:inline>
    // -- Affichage du bon sous-formulaire
    const domainSelect = document.getElementById('domain');
    const blocks = document.querySelectorAll('[data-domain-form]');
    function showBlock(val) {
      blocks.forEach(b => {
        b.classList.toggle('hidden', b.getAttribute('data-domain-form') !== val);
      });
    }
    if (domainSelect) {
      showBlock(domainSelect.value);
      domainSelect.addEventListener('change', () => showBlock(domainSelect.value));
    }
    // si un domain est passé en query
    const initDomain = new URLSearchParams(location.search).get('domain');
    if (initDomain) showBlock(initDomain);

    // -- Retour intelligemment
    const originParam = new URLSearchParams(location.search).get('origin');
    const backBtn = document.getElementById('back-btn');
    const backLink = document.getElementById('back-link');
    const fallbackHref = originParam ? `/${originParam}` : '/';
    function goBack() {
      try {
        if (document.referrer && new URL(document.referrer).origin === location.origin) {
          history.back(); return;
        }
      } catch(e){}
      location.href = fallbackHref;
    }
    backBtn?.addEventListener('click', goBack);
    backLink?.addEventListener('click', (e) => { e.preventDefault(); goBack(); });

    // -- Conditions internes (showIf) pour chaque sous-form
    function setupConditions(container) {
      const wrappers = [...container.querySelectorAll('[data-show-if]')];
      if (!wrappers.length) return;

      function evalOne(wrap) {
        const depKey    = wrap.getAttribute('data-show-if');
        const equals    = wrap.getAttribute('data-show-eq'); // string ou ''
        const equalsAny = (wrap.getAttribute('data-show-any') || '').split(',').filter(Boolean);
        const depCtrl   = container.querySelector(`[data-reg-id="${depKey}"]`);

        if (!depCtrl) { wrap.classList.remove('hidden'); return; }

        const val = (depCtrl.value || '').trim();
        let show = true;
        if (equals) show = (val === equals);
        if (equalsAny.length) show = equalsAny.includes(val);

        wrap.classList.toggle('hidden', !show);
        if (!show) {
          const input = wrap.querySelector('input, textarea, select');
          if (input) input.value = '';
        }
      }

      function evalAll(){ wrappers.forEach(evalOne); }

      const keys = new Set(wrappers.map(w => w.getAttribute('data-show-if')).filter(Boolean));
      keys.forEach(k => {
        const ctl = container.querySelector(`[data-reg-id="${k}"]`);
        if (ctl) { ctl.addEventListener('input', evalAll); ctl.addEventListener('change', evalAll); }
      });
      evalAll();
    }

    // initialiser les conditions pour chaque sous-form une fois monté
    document.querySelectorAll('[data-domain-form]').forEach(setupConditions);

    // -- Submit : copie visible -> hidden (SEULEMENT pour le bloc visible)
    const form = document.getElementById('contact-form');
    form?.addEventListener('submit', () => {
      const active = [...document.querySelectorAll('[data-domain-form]')].find(b => !b.classList.contains('hidden'));
      if (!active) return;

      // reset tous les hidden de tous les sous-forms
      document.querySelectorAll('[data-registry] input[type="hidden"]').forEach(inp => {
        inp.disabled = true; inp.value = '';
      });

      // copier les valeurs du bloc actif
      const visibles = active.querySelectorAll('[data-reg-id]');
      visibles.forEach(src => {
        const id = src.getAttribute('data-reg-id');
        const hidden = active.querySelector(`#${id}`);
        if (!hidden) return;

        let val = (src.value || '').trim();

        // Ex: “frequence=autre” → récupérer précision si présente
        if (id === 'reg-frequence' && (src.value || '') === 'autre') {
          const other = active.querySelector('[data-reg-id="frequenceAutre"]');
          val = (other?.value || '').trim();
        }

        if (val) {
          hidden.value = val;
          hidden.disabled = false;
        }
      });

      // Redirection /merci?origin=...
      const originVal = originParam || document.getElementById('Provenance')?.value || '';
      const current = new URL(form.getAttribute('action') || '/merci', location.origin);
      if (originVal) current.searchParams.set('origin', originVal);
      form.setAttribute('action', current.pathname + current.search);
    });
  </script>
</Site>
