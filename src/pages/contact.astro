---
import Site from '@/layouts/SiteLayout.astro';

const url = new URL(Astro.request.url);
const domainFromQuery = url.searchParams.get('domain') ?? '';
const originFromQuery = url.searchParams.get('origin') ?? '';
---

<Site title="Contact ‚Äî Demander un devis" description="Demandez un devis pour services ou formations.">
  <section class="max-w-3xl mx-auto px-4 py-10">
    <div class="mb-6">
      <a id="back-link" href="/" class="text-sm underline">‚Üê Retour</a>
    </div>

    <h1 class="text-3xl font-bold mb-6">Demander un devis</h1>
    <p class="text-gray-600 mb-6">
      Choisissez un domaine pour afficher les questions adapt√©es. Tous les champs marqu√©s * sont requis.
    </p>

    <form
      id="contact-form"
      method="POST"
      name="devis-v2"
      data-netlify="true"
      netlify-honeypot="bot-field"
      action="/merci"
      class="space-y-6"
    >
      <!-- requis par Netlify Forms -->
      <input type="hidden" name="form-name" value="devis-v2" />  <!-- üîÅ idem -->
      <input type="text" name="bot-field" class="hidden" tabindex="-1" autocomplete="off" />

      <!-- Origine pour suivi (champ technique propre) -->
      <input type="hidden" id="originPath" name="originPath" value={originFromQuery} />

      <!-- Domaine -->
      <label class="block">
        <span class="text-sm">Domaine *</span>
        <select id="domain" name="domain" required class="mt-1 w-full border rounded-lg p-2">
          <option value="">‚Äî S√©lectionner ‚Äî</option>
          <option>EVEIL MUSICAL</option>
          <option>MUSICO THERAPIE</option>
          <option>Spectacles</option>
          <option>Atelier EHPAD</option>
          <option>Atelier Petite Enfance</option>
          <option>Handpan</option>
        </select>
      </label>

      <!-- Champs sp√©cifiques au domaine (affich√©s via JS, SANS name) -->
      <div id="dynamic-fields" class="space-y-4"></div>

      <!-- Coordonn√©es -->
      <div class="grid md:grid-cols-2 gap-4">
        <label class="block">
          <span class="text-sm">Nom *</span>
          <input name="name" required class="mt-1 w-full border rounded-lg p-2" />
        </label>
        <label class="block">
          <span class="text-sm">Email *</span>
          <input name="email" type="email" required class="mt-1 w-full border rounded-lg p-2" />
        </label>
      </div>

      <label class="block">
        <span class="text-sm">Message</span>
        <textarea name="message" rows="5" class="mt-1 w-full border rounded-lg p-2"></textarea>
      </label>

      <div class="flex items-center justify-between pt-2">
        <button type="button" id="back-btn" class="px-3 py-2 border rounded-lg">Retour</button>
        <button type="submit" class="px-4 py-2 rounded-lg border bg-gray-900 text-white">Envoyer</button>
      </div>
    </form>
  </section>

  <script is:inline>
    // Mapping des champs par domaine (cl√© = name technique, labelFR = intitul√© email)
    const FIELD_MAP = {
      'EVEIL MUSICAL': [
        { key: 'age',            labelFR: "√Çge des enfants",           type: 'text',   required: true },
        { key: 'nbParticipants', labelFR: "Nombre de participants",     type: 'number', required: true },
        { key: 'lieu',           labelFR: "Lieu (ville)",               type: 'text' },
        { key: 'dateSouhaitee',  labelFR: "Date souhait√©e",             type: 'date' },
      ],
      'MUSICO THERAPIE': [
        { key: 'public',         labelFR: "Public (pathologies, besoins)", type: 'text', required: true },
        { key: 'frequence',      labelFR: "Fr√©quence (ponctuel / hebdo)",  type: 'text' },
        { key: 'lieu',           labelFR: "Lieu (√©tablissement)",          type: 'text' },
      ],
      'Spectacles': [
        { key: 'typeSpectacle',  labelFR: "Type de spectacle",          type: 'text',   required: true },
        { key: 'duree',          labelFR: "Dur√©e (mn)",                 type: 'number' },
        { key: 'lieu',           labelFR: "Lieu",                       type: 'text' },
        { key: 'dateSouhaitee',  labelFR: "Date souhait√©e",             type: 'date' },
      ],
      'Atelier EHPAD': [
        { key: 'service',        labelFR: "Service / unit√©",            type: 'text' },
        { key: 'nbResidents',    labelFR: "Nombre de r√©sidents",        type: 'number', required: true },
        { key: 'frequence',      labelFR: "Fr√©quence",                  type: 'text' },
      ],
      'Atelier Petite Enfance': [
        { key: 'structure',      labelFR: "Structure (cr√®che, RAM...)", type: 'text' },
        { key: 'nbEnfants',      labelFR: "Nombre d‚Äôenfants",           type: 'number' },
        { key: 'age',            labelFR: "Tranche d‚Äô√¢ge",              type: 'text' },
      ],
      'Handpan': [
        { key: 'niveau',         labelFR: "Niveau",                     type: 'text',   required: true },
        { key: 'objectif',       labelFR: "Objectif",                   type: 'text' },
        { key: 'duree',          labelFR: "Dur√©e souhait√©e",            type: 'text' },
      ],
    };

    // Mappage "joli" pour le Domaine (FR / casse)
    const DOMAIN_LABELS = {
      'EVEIL MUSICAL': '√âveil musical',
      'MUSICO THERAPIE': 'Musicoth√©rapie',
      'Spectacles': 'Spectacles',
      'Atelier EHPAD': 'Atelier EHPAD',
      'Atelier Petite Enfance': 'Atelier petite enfance',
      'Handpan': 'Handpan',
    };

    const params = new URLSearchParams(location.search);
    const domainFromQuery = params.get('domain');
    const originFromQuery = params.get('origin');

    const domainSelect = document.getElementById('domain');
    const dynamic = document.getElementById('dynamic-fields');
    const originPathInput = document.getElementById('originPath');

    function renderFields(domain) {
      const fields = FIELD_MAP[domain] || [];
      dynamic.innerHTML = fields.map(f => `
        <label class="block">
          <span class="text-sm">${f.labelFR}${f.required ? ' *' : ''}</span>
          <input ${f.type ? `type="${f.type}"` : ''} ${f.required ? 'required' : ''} data-key="${f.key}" class="mt-1 w-full border rounded-lg p-2" />
        </label>
      `).join('');
    }

    // Pr√©-remplissage
    if (domainFromQuery && [...domainSelect.options].some(o => o.value === domainFromQuery)) {
      domainSelect.value = domainFromQuery;
      renderFields(domainFromQuery);
    }
    if (originFromQuery && originPathInput) originPathInput.value = originFromQuery;

    // Changement manuel du domaine
    domainSelect.addEventListener('change', () => renderFields(domainSelect.value));

    // Boutons retour
    const backBtn = document.getElementById('back-btn');
    const backLink = document.getElementById('back-link');
    const fallbackHref = originFromQuery ? `/${originFromQuery}` : '/';
    function goBack() {
      if (document.referrer && new URL(document.referrer).origin === location.origin) {
        history.back();
      } else {
        location.href = fallbackHref;
      }
    }
    backBtn.addEventListener('click', goBack);
    backLink.addEventListener('click', (e) => { e.preventDefault(); goBack(); });

    // Submit : on fabrique UNIQUEMENT les champs cach√©s utiles, avec √©tiquettes FR
    const form = document.getElementById('contact-form');
    if (form) {
      form.addEventListener('submit', () => {
        // 1) Nettoyer d'anciens auto-champs si pr√©sents
        form.querySelectorAll('input[data-auto="1"], textarea[data-auto="1"]').forEach(n => n.remove());

        // 2) Domaine (label FR)
        const rawDomain = domainSelect.value;
        const domainFR = DOMAIN_LABELS[rawDomain] || rawDomain;
        const domaineHidden = document.createElement('input');
        domaineHidden.type = 'hidden';
        domaineHidden.name = 'Domaine';
        domaineHidden.value = domainFR;
        domaineHidden.setAttribute('data-auto', '1');
        form.appendChild(domaineHidden);

        // 3) Provenance
        const provHidden = document.createElement('input');
        provHidden.type = 'hidden';
        provHidden.name = 'Provenance';
        provHidden.value = originPathInput?.value || originFromQuery || '';
        provHidden.setAttribute('data-auto', '1');
        form.appendChild(provHidden);

        // 4) Champs sp√©cifiques : cr√©er un hidden par champ rempli, avec label FR
        const fields = FIELD_MAP[rawDomain] || [];
        const values = [];
        dynamic.querySelectorAll('input[data-key]').forEach(src => {
          const key = src.getAttribute('data-key');
          const cfg = fields.find(f => f.key === key);
          const val = (src.value || '').trim();
          if (!cfg || !val) return;

          // champ cach√© pour Netlify (nom lisible)
          const h = document.createElement('input');
          h.type = 'hidden';
          h.name = cfg.labelFR;    // ‚Üê intitul√© fran√ßais dans l‚Äôemail
          h.value = val;
          h.setAttribute('data-auto', '1');
          form.appendChild(h);

          values.push(`${cfg.labelFR}: ${val}`);
        });

        // 5) (Optionnel) R√©sum√© joli en une zone
        if (values.length) {
          const resume = document.createElement('textarea');
          resume.name = 'R√©sum√©';
          resume.setAttribute('data-auto', '1');
          resume.value = [`Domaine: ${domainFR}`, ...values].join('\n');
          form.appendChild(resume);
        }

        // 6) Redirection /merci?origin=...
        const current = new URL(form.getAttribute('action') || '/merci', location.origin);
        const originVal = (originPathInput && 'value' in originPathInput ? originPathInput.value : '') || originFromQuery || '';
        if (originVal) current.searchParams.set('origin', originVal);
        form.setAttribute('action', current.pathname + current.search);
      });
    }
  </script>
</Site>
